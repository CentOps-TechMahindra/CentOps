--------------------------------------------------------------------------
-- Centops V3 script to run on blank schema
--Note: 1) Replace tablespace name FWD_TS with tablespace available on database
--------------------------------------------------------------------------
-- "Set define off" turns off substitution variables.
-- Set define off;

define MY_TS = &1

CREATE OR REPLACE TYPE TYP_FEEDBACK_ID AS TABLE OF NUMBER
/

CREATE OR REPLACE TYPE TYP_REQUEST_ID AS TABLE OF NUMBER
/


CREATE OR REPLACE TYPE TYP_FEEDBACK_ID AS TABLE OF NUMBER
/

SHOW ERRORS;

CREATE OR REPLACE TYPE TYP_REQUEST_ID AS TABLE OF NUMBER
/

SHOW ERRORS;

CREATE SEQUENCE APPLICATION_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE APP_URL_SEQ
  START WITH 5
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE FEEDBACK_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE LOG_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE REPORT_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE START_FLOW_HISTORY_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE USER_ACCESS_REQUEST_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE USER_LOGIN_LOG_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE WORKFLOW_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE WORKFLOW_TYPE_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE TABLE APP_URL_LIST
(
  SRNO         NUMBER                           NOT NULL,
  APPNAME      VARCHAR2(100 BYTE),
  DESCRIP      VARCHAR2(100 BYTE),
  URL          VARCHAR2(500 BYTE),
  LIC          VARCHAR2(20 BYTE),
  ISFEATURE    NUMBER(1)                        DEFAULT 0,
  IMGNAME      VARCHAR2(100 BYTE),
  PHOTO        BLOB,
  ISDISABLED   NUMBER(1)                        DEFAULT 0,
  ISINSTALLED  NUMBER(1)                        DEFAULT 1
)
LOB (PHOTO) STORE AS BASICFILE (
  TABLESPACE  &MY_TS
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  RETENTION
  NOCACHE
  LOGGING
      STORAGE    (
                  INITIAL          64K
                  NEXT             1M
                  MAXSIZE          UNLIMITED
                  MINEXTENTS       1
                  MAXEXTENTS       UNLIMITED
                  PCTINCREASE      0
                  BUFFER_POOL      DEFAULT
                 ))
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX APP_URL_LIST_PK ON APP_URL_LIST
(SRNO)
LOGGING
TABLESPACE &MY_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE APP_URL_LIST
 ADD CONSTRAINT APP_URL_LIST_PK
  PRIMARY KEY
  (SRNO)
  USING INDEX APP_URL_LIST_PK;

CREATE TABLE PS_APPLICATION
(
  APP_ID       NUMBER                           NOT NULL,
  APP_NAME     VARCHAR2(200 BYTE)               NOT NULL,
  CREATE_BY    VARCHAR2(10 BYTE),
  CREATE_DATE  DATE                             DEFAULT SYSDATE               NOT NULL,
  UPDATE_BY    VARCHAR2(10 BYTE),
  UPDATE_DATE  DATE                             DEFAULT SYSDATE               NOT NULL,
  DESCRIPTION  VARCHAR2(200 BYTE),
  MOTS_ID      NUMBER
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX PS_APPLICATION_PK ON PS_APPLICATION
(APP_ID)
LOGGING
TABLESPACE &MY_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE PS_APPLICATION
 ADD CONSTRAINT PS_APPLICATION_PK
  PRIMARY KEY
  (APP_ID)
  USING INDEX PS_APPLICATION_PK;

CREATE TABLE PS_FEEDBACK
(
  FEEDBACK_ID    NUMBER                         NOT NULL,
  FEEDBACK       VARCHAR2(500 BYTE)             NOT NULL,
  WORKFLOW_ID    NUMBER,
  START_FLOW_ID  NUMBER,
  ADDED_BY       VARCHAR2(10 BYTE),
  ADDED_DATE     DATE                           DEFAULT SYSDATE               NOT NULL,
  ADMIN_COMMENT  VARCHAR2(2000 BYTE),
  UPDATED_BY     VARCHAR2(10 BYTE),
  UPDATED_DATE   DATE                           DEFAULT NULL,
  STATUS         VARCHAR2(10 BYTE)
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX PS_FEEDBACK_PK ON PS_FEEDBACK
(FEEDBACK_ID)
LOGGING
TABLESPACE &MY_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE PS_FEEDBACK
 ADD CONSTRAINT PS_FEEDBACK_PK
  PRIMARY KEY
  (FEEDBACK_ID)
  USING INDEX PS_FEEDBACK_PK;

CREATE TABLE PS_REPORT_DB_DETAILS
(
  ID             NUMBER,
  WORKFLOW_ID    NUMBER,
  USERNAME       VARCHAR2(100 BYTE),
  PASSWORD       VARCHAR2(100 BYTE),
  HOSTNAME       VARCHAR2(200 BYTE),
  PORT           NUMBER,
  SID            VARCHAR2(100 BYTE),
  DATABASE_TYPE  VARCHAR2(200 BYTE),
  REPORT_TABLE   VARCHAR2(100 BYTE),
  QUERY          VARCHAR2(500 BYTE)
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE TABLE PS_SERVER_STATE
(
  SERVER             VARCHAR2(25 BYTE),
  OS_TYPE            VARCHAR2(15 BYTE),
  OS_VERSION         VARCHAR2(100 BYTE),
  ATT_PATCH          VARCHAR2(50 BYTE),
  KERNEL_VERSION     VARCHAR2(50 BYTE),
  UP_TIME            VARCHAR2(50 BYTE),
  LAST_CHECK_DATE    DATE,
  UPDATING_USER      VARCHAR2(15 BYTE),
  OS_UPDATE_COUNTER  NUMBER,
  UPDATION_SYS_DATE  DATE,
  CREATION_SYS_DATE  DATE,
  COMPLIANT          VARCHAR2(5 BYTE),
  APPLICATION_NAME   VARCHAR2(50 BYTE),
  ENVIRONMENT        VARCHAR2(40 BYTE)
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE TABLE PS_USER_ACCESS_REQUEST
(
  REQUEST_ID         NUMBER                     NOT NULL,
  USER_ID            VARCHAR2(20 BYTE)          NOT NULL,
  REQUESTED_LVL_ID   NUMBER,
  REQUESTED_APP_ID   NUMBER,
  REQUESTED_PRF_ID   NUMBER,
  STATUS             VARCHAR2(20 BYTE)          NOT NULL,
  REQUEST_DATE       DATE                       DEFAULT SYSDATE               NOT NULL,
  REQUESTER_COMMENT  VARCHAR2(500 BYTE),
  APPROVED_BY        VARCHAR2(20 BYTE),
  APPROVED_DATE      DATE,
  APPROVER_COMMENT   VARCHAR2(500 BYTE)
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX PS_USER_ACCESS_REQUEST_PK ON PS_USER_ACCESS_REQUEST
(REQUEST_ID)
LOGGING
TABLESPACE &MY_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE PS_USER_ACCESS_REQUEST
 ADD CONSTRAINT PS_USER_ACCESS_REQUEST_PK
  PRIMARY KEY
  (REQUEST_ID)
  USING INDEX PS_USER_ACCESS_REQUEST_PK;

CREATE TABLE PS_USER_LOGIN_LOG
(
  LOG_ID       NUMBER                           NOT NULL,
  USER_ID      VARCHAR2(20 BYTE),
  LOG_IN_DATE  DATE
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX PS_USER_LOGIN_LOG_PK ON PS_USER_LOGIN_LOG
(LOG_ID)
LOGGING
TABLESPACE &MY_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE PS_USER_LOGIN_LOG
 ADD CONSTRAINT PS_USER_LOGIN_LOG_PK
  PRIMARY KEY
  (LOG_ID)
  USING INDEX PS_USER_LOGIN_LOG_PK;

CREATE TABLE PS_USR_MGMT_LEVEL
(
  LVL_ID       NUMBER                           NOT NULL,
  LVL_NAME     VARCHAR2(50 BYTE)                NOT NULL,
  LVL_SCOPE    VARCHAR2(50 BYTE),
  LVL_DESC     VARCHAR2(500 BYTE),
  LVL_DEFAULT  VARCHAR2(1 BYTE)
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX PS_USR_MGMT_LEVEL_PK ON PS_USR_MGMT_LEVEL
(LVL_ID)
LOGGING
TABLESPACE &MY_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE PS_USR_MGMT_LEVEL
 ADD CONSTRAINT PS_USR_MGMT_LEVEL_PK
  PRIMARY KEY
  (LVL_ID)
  USING INDEX PS_USR_MGMT_LEVEL_PK;

CREATE TABLE PS_USR_PROFILE
(
  PRF_ID       NUMBER                           NOT NULL,
  PRF_NAME     VARCHAR2(50 BYTE)                NOT NULL,
  PRF_SCOPE    VARCHAR2(50 BYTE),
  PRF_DESC     VARCHAR2(500 BYTE),
  PRF_DEFAULT  VARCHAR2(1 BYTE)
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX PS_USR_PROFILE_PK ON PS_USR_PROFILE
(PRF_ID)
LOGGING
TABLESPACE &MY_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE PS_USR_PROFILE
 ADD CONSTRAINT PS_USR_PROFILE_PK
  PRIMARY KEY
  (PRF_ID)
  USING INDEX PS_USR_PROFILE_PK;

CREATE TABLE PS_WORKFLOW_LOG
(
  LOG_ID       NUMBER                           NOT NULL,
  WORKFLOW_ID  NUMBER                           NOT NULL,
  START_BY     VARCHAR2(50 BYTE),
  START_DATE   DATE,
  STATUS       VARCHAR2(20 BYTE)
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX PS_WORKFLOW_LOG_PK ON PS_WORKFLOW_LOG
(LOG_ID)
LOGGING
TABLESPACE &MY_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE PS_WORKFLOW_LOG
 ADD CONSTRAINT PS_WORKFLOW_LOG_PK
  PRIMARY KEY
  (LOG_ID)
  USING INDEX PS_WORKFLOW_LOG_PK;

CREATE TABLE PS_WORKFLOW_PARAM_MAP
(
  WORKFLOW_ID     NUMBER                        NOT NULL,
  PARAMETER_NAME  VARCHAR2(200 BYTE)            NOT NULL
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE TABLE PS_WORKFLOW_TYPE
(
  WORKFLOW_TYPE_ID  NUMBER                      NOT NULL,
  WORKFLOW_TYPE     VARCHAR2(50 BYTE)           NOT NULL,
  DESCRIPTION       VARCHAR2(200 BYTE),
  ADDED_BY          VARCHAR2(20 BYTE),
  ADDED_DATE        DATE,
  UPDATED_BY        VARCHAR2(20 BYTE),
  UPDATED_DATE      DATE
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX PS_WORKFLOW_TYPE_PK ON PS_WORKFLOW_TYPE
(WORKFLOW_TYPE_ID)
LOGGING
TABLESPACE &MY_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE PS_WORKFLOW_TYPE
 ADD CONSTRAINT PS_WORKFLOW_TYPE_PK
  PRIMARY KEY
  (WORKFLOW_TYPE_ID)
  USING INDEX PS_WORKFLOW_TYPE_PK;

CREATE OR REPLACE TRIGGER GEN_PS_APPLICATION  BEFORE INSERT ON PS_APPLICATION
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.APP_ID IS NULL THEN
            SELECT application_id_seq.nextval INTO :NEW.APP_ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER GEN_PS_FEEDBACK BEFORE INSERT ON PS_FEEDBACK
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.FEEDBACK_ID IS NULL THEN
            SELECT feedback_id_seq.nextval INTO :NEW.FEEDBACK_ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER GEN_PS_LOG_ID BEFORE INSERT ON PS_WORKFLOW_LOG
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.LOG_ID IS NULL THEN
            SELECT log_id_seq.nextval INTO :NEW.LOG_ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER GEN_PS_REPORT_ID BEFORE INSERT ON PS_REPORT_DB_DETAILS
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.ID IS NULL THEN
            SELECT report_id_seq.nextval INTO :NEW.ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER GEN_PS_USER_ACCESS_REQUEST_ID BEFORE INSERT ON PS_USER_ACCESS_REQUEST
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.REQUEST_ID IS NULL THEN
            SELECT user_access_request_id_seq.nextval INTO :NEW.REQUEST_ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER GEN_PS_USER_LOGIN_LOG  BEFORE INSERT ON PS_USER_LOGIN_LOG
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.LOG_ID IS NULL THEN
            SELECT user_login_log_id_seq.nextval INTO :NEW.LOG_ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER GEN_PS_WORKFLOW_TYPE BEFORE INSERT ON PS_WORKFLOW_TYPE
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.WORKFLOW_TYPE_ID IS NULL THEN
            SELECT workflow_type_id_seq.nextval INTO :NEW.WORKFLOW_TYPE_ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE TABLE PS_USERS
(
  USER_ID               VARCHAR2(10 BYTE)       NOT NULL,
  USER_FNAME            VARCHAR2(100 BYTE),
  USER_LNAME            VARCHAR2(100 BYTE),
  USER_EMAIL_ID         VARCHAR2(100 BYTE),
  USER_CONTACT_NO       VARCHAR2(20 BYTE),
  USER_TEAM             VARCHAR2(50 BYTE),
  ACCOUNT_CREATED_DATE  DATE                    DEFAULT SYSDATE               NOT NULL,
  LVL_ID                NUMBER                  DEFAULT 1,
  APP_ID                NUMBER,
  PRF_ID                NUMBER,
  LAST_LOGIN_DATE       DATE,
  PASSWORD              VARCHAR2(100 BYTE),
  CUSTOM_USER           VARCHAR2(20 BYTE)
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX PS_USERS_PK ON PS_USERS
(USER_ID)
LOGGING
TABLESPACE &MY_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE PS_USERS
 ADD CONSTRAINT PS_USERS_PK
  PRIMARY KEY
  (USER_ID)
  USING INDEX PS_USERS_PK;

CREATE TABLE PS_WORKFLOW
(
  WORKFLOW_ID        NUMBER                     NOT NULL,
  WORKFLOW_NAME      VARCHAR2(200 BYTE)         NOT NULL,
  WORKFLOW_TYPE_ID   NUMBER,
  HOST_URL           VARCHAR2(200 BYTE),
  JOB_NAME           VARCHAR2(200 BYTE),
  BUILD_TYPE         VARCHAR2(200 BYTE),
  BUILD_PARAMETER    VARCHAR2(200 BYTE),
  APP_ID             NUMBER,
  DESCRIPTION        VARCHAR2(500 BYTE),
  PORT               NUMBER,
  SERVER             VARCHAR2(200 BYTE),
  AUTH_TOKEN         VARCHAR2(200 BYTE),
  PASSWORD           VARCHAR2(200 BYTE),
  USERNAME           VARCHAR2(200 BYTE),
  CREATED_BY         VARCHAR2(10 BYTE),
  CREATED_DATE       DATE                       DEFAULT SYSDATE,
  LAST_UPDATED_BY    VARCHAR2(10 BYTE),
  LAST_UPDATED_DATE  DATE                       DEFAULT SYSDATE,
  LAST_BUILD_STATUS  VARCHAR2(20 BYTE)
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX PS_WORKFLOW_PK ON PS_WORKFLOW
(WORKFLOW_ID)
LOGGING
TABLESPACE &MY_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE PS_WORKFLOW
 ADD CONSTRAINT PS_WORKFLOW_PK
  PRIMARY KEY
  (WORKFLOW_ID)
  USING INDEX PS_WORKFLOW_PK;

CREATE TABLE PS_WORKFLOW_FIXIT_MAP
(
  WORKFLOW_ID          NUMBER                   NOT NULL,
  ERROR_NAME           VARCHAR2(100 BYTE)       NOT NULL,
  ERROR_CODE           NUMBER                   NOT NULL,
  FIXIT_WORKFLOW_NAME  VARCHAR2(100 BYTE)       NOT NULL
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE TABLE PS_WORKFLOW_PROFILE_MAP
(
  WORKFLOW_ID  NUMBER,
  PRF_ID       NUMBER
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE OR REPLACE PROCEDURE SP_APPROVE_REJECT_USER_REQUEST
( P_REQUEST_ID_ARRAY IN TYP_REQUEST_ID
, P_APPROVER IN VARCHAR2
, P_STATUS IN VARCHAR2
, P_COMMENT IN VARCHAR2
, P_RESULT OUT NUMBER
, P_MESSAGE OUT VARCHAR2
) AS
BEGIN
    DECLARE
    V_EXISTS NUMBER;
    V_USER_ID VARCHAR2(20);
    V_LVL_ID NUMBER;
    V_APP_ID NUMBER;
    V_PRF_ID NUMBER;
    V_REQUEST_ID PS_USER_ACCESS_REQUEST.REQUEST_ID%TYPE;
    BEGIN
        IF P_APPROVER IS NULL OR P_APPROVER='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'User ID missing';
            RETURN;
        END IF;
        
        IF P_STATUS IS NULL OR P_STATUS='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'Status missing';
            RETURN;
        END IF;
        
        IF P_COMMENT IS NULL OR P_COMMENT='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'Approver Comment missing';
            RETURN;
        END IF;
        
        FOR i IN 1..P_REQUEST_ID_ARRAY.COUNT
          LOOP
            V_REQUEST_ID := P_REQUEST_ID_ARRAY(i);
 
            IF P_STATUS = 'APPROVED' THEN
              UPDATE PS_USER_ACCESS_REQUEST SET STATUS = 'APPROVED', APPROVED_BY = LOWER(P_APPROVER), APPROVED_DATE = SYSDATE, APPROVER_COMMENT = P_COMMENT WHERE REQUEST_ID = V_REQUEST_ID;
              
              BEGIN
                SELECT USER_ID, REQUESTED_LVL_ID, REQUESTED_APP_ID, REQUESTED_PRF_ID INTO V_USER_ID, V_LVL_ID, V_APP_ID, V_PRF_ID FROM PS_USER_ACCESS_REQUEST WHERE REQUEST_ID = V_REQUEST_ID;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                V_LVL_ID := 0;
              END;  
                
              UPDATE PS_USERS SET LVL_ID = V_LVL_ID, APP_ID = V_APP_ID, PRF_ID = V_PRF_ID WHERE USER_ID = V_USER_ID;
            
            ELSIF P_STATUS = 'REJECTED' THEN
              UPDATE PS_USER_ACCESS_REQUEST SET STATUS = P_STATUS, APPROVED_BY = LOWER(P_APPROVER), APPROVED_DATE = SYSDATE, APPROVER_COMMENT = P_COMMENT WHERE REQUEST_ID = V_REQUEST_ID;
            
            ELSE
              P_RESULT := 2;
              P_MESSAGE := 'Invalid approval status';
              RETURN;
            END IF;
            
        END LOOP;
          
        COMMIT;
        P_RESULT := 0;
        P_MESSAGE := 'SUCCCESS';    
    END;
EXCEPTION
    WHEN OTHERS THEN
        P_RESULT := -1;
        P_MESSAGE := SQLERRM;    
        ROLLBACK;    
END SP_APPROVE_REJECT_USER_REQUEST;
/

SHOW ERRORS;

CREATE OR REPLACE PROCEDURE SP_SAVE_UPDATE_USER_REQUEST
( P_USER_ID IN VARCHAR2
, P_REQUESTED_LVL_ID IN NUMBER
, P_REQUESTED_APP_ID IN NUMBER
, P_REQUESTED_PRF_ID IN NUMBER
, P_USER_TEAM IN VARCHAR2
, P_STATUS IN VARCHAR2
, P_COMMENT IN VARCHAR2
, P_RESULT OUT NUMBER
, P_MESSAGE OUT VARCHAR2
) AS
BEGIN
    DECLARE
    V_EXISTS NUMBER;
    V_REQUEST_ID NUMBER;
    BEGIN
        V_REQUEST_ID :=0;
        dbms_output.put_line(V_REQUEST_ID);
        IF P_USER_ID IS NULL OR P_USER_ID='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'User ID missing';
            RETURN;
        END IF;
        
        IF P_REQUESTED_LVL_ID IS NULL OR P_REQUESTED_LVL_ID='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'Requested Level ID missing';
            RETURN;
        END IF;
        
        IF P_REQUESTED_APP_ID IS NULL OR P_REQUESTED_APP_ID='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'Requested App ID missing';
            RETURN;
        END IF;
        
        IF P_REQUESTED_PRF_ID IS NULL OR P_REQUESTED_PRF_ID='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'Requested Profile ID missing';
            RETURN;
        END IF;
        
        IF P_USER_TEAM IS NULL OR P_USER_TEAM='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'User Team missing';
            RETURN;
        END IF;
        
        IF P_STATUS IS NULL OR P_STATUS='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'Status missing';
            RETURN;
        END IF;
        
        IF P_COMMENT IS NULL OR P_COMMENT='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'Requester Comment missing';
            RETURN;
        END IF;
        dbms_output.put_line(V_REQUEST_ID);
        BEGIN
          SELECT REQUEST_ID into V_REQUEST_ID FROM PS_USER_ACCESS_REQUEST WHERE USER_ID = P_USER_ID AND STATUS = 'PENDING';
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
          V_REQUEST_ID := 0;
        END;  
         
            IF V_REQUEST_ID > 0 THEN
              UPDATE PS_USER_ACCESS_REQUEST SET REQUESTED_LVL_ID = P_REQUESTED_LVL_ID, REQUESTED_APP_ID = P_REQUESTED_APP_ID, REQUESTED_PRF_ID = P_REQUESTED_PRF_ID, REQUESTER_COMMENT = P_COMMENT WHERE REQUEST_ID = V_REQUEST_ID;
              
              UPDATE PS_USERS SET USER_TEAM = P_USER_TEAM WHERE USER_ID = P_USER_ID;
            ELSIF V_REQUEST_ID <= 0 THEN
              INSERT INTO PS_USER_ACCESS_REQUEST (USER_ID, REQUESTED_LVL_ID, REQUESTED_APP_ID, REQUESTED_PRF_ID, STATUS, REQUESTER_COMMENT) VALUES (P_USER_ID, P_REQUESTED_LVL_ID, P_REQUESTED_APP_ID, P_REQUESTED_PRF_ID, P_STATUS, P_COMMENT);
              
              UPDATE PS_USERS SET USER_TEAM = P_USER_TEAM WHERE USER_ID = P_USER_ID;
            ELSE
              P_RESULT := 2;
              P_MESSAGE := 'Unable to save request!';
              RETURN;
            END IF;
          
        COMMIT;
        P_RESULT := 0;
        P_MESSAGE := 'SUCCCESS';    
    END;
EXCEPTION
    WHEN OTHERS THEN
        P_RESULT := -1;
        P_MESSAGE := SQLERRM;    
        ROLLBACK;    
END SP_SAVE_UPDATE_USER_REQUEST;
/

SHOW ERRORS;

CREATE OR REPLACE TRIGGER GEN_PS_WORKFLOW_ID BEFORE INSERT ON PS_WORKFLOW
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.WORKFLOW_ID IS NULL THEN
            SELECT workflow_id_seq.nextval INTO :NEW.WORKFLOW_ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE TABLE PS_START_FLOW_HISTORY
(
  START_FLOW_ID   NUMBER                        NOT NULL,
  WORKFLOW_ID     NUMBER                        NOT NULL,
  START_TIME      TIMESTAMP(6),
  START_BY        VARCHAR2(50 BYTE),
  JENKINS_STATUS  VARCHAR2(20 BYTE),
  REPORT_STATUS   VARCHAR2(20 BYTE)
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX PS_START_FLOW_STATUS_PK ON PS_START_FLOW_HISTORY
(START_FLOW_ID)
LOGGING
TABLESPACE &MY_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE PS_START_FLOW_HISTORY
 ADD CONSTRAINT PS_START_FLOW_STATUS_PK
  PRIMARY KEY
  (START_FLOW_ID)
  USING INDEX PS_START_FLOW_STATUS_PK;

CREATE OR REPLACE TRIGGER GEN_START_FLOW_ID BEFORE INSERT ON PS_START_FLOW_HISTORY
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.START_FLOW_ID IS NULL THEN
            SELECT start_flow_history_id_seq.nextval INTO :NEW.START_FLOW_ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE TABLE PS_BUILD_HISTORY
(
  WORKFLOW_ID         NUMBER,
  BUILD_NO            NUMBER,
  ID                  NUMBER,
  FULL_DISPLAY_NAME   VARCHAR2(100 BYTE),
  DISPLAY_NAME        VARCHAR2(50 BYTE),
  BUILT_ON            VARCHAR2(50 BYTE),
  URL                 VARCHAR2(200 BYTE),
  QUEUE_ID            NUMBER,
  TIMESTAMP           TIMESTAMP(6),
  ESTIMATED_DURATION  NUMBER,
  DURATION            NUMBER,
  SHORT_DESCRIPTIOIN  VARCHAR2(200 BYTE),
  ADDR                VARCHAR2(200 BYTE),
  USER_ID             VARCHAR2(50 BYTE),
  USER_NAME           VARCHAR2(50 BYTE),
  UPSTREAM_BUILD_NO   NUMBER,
  UPSTREAM_BUILD_URL  VARCHAR2(200 BYTE),
  UPSTREAM_PROJECT    VARCHAR2(200 BYTE),
  RESULT              VARCHAR2(20 BYTE),
  START_FLOW_ID       NUMBER
)
TABLESPACE &MY_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

ALTER TABLE PS_USERS
 ADD CONSTRAINT PS_USERS_PS_APPLICATION_FK1 
  FOREIGN KEY (APP_ID) 
  REFERENCES PS_APPLICATION (APP_ID);

ALTER TABLE PS_USERS
 ADD CONSTRAINT PS_USERS_PS_USR_PROFILE_FK1 
  FOREIGN KEY (PRF_ID) 
  REFERENCES PS_USR_PROFILE (PRF_ID);

ALTER TABLE PS_USERS
 ADD CONSTRAINT PS_USERS_USR_MGMT_LEVEL_FK1 
  FOREIGN KEY (LVL_ID) 
  REFERENCES PS_USR_MGMT_LEVEL (LVL_ID);

ALTER TABLE PS_WORKFLOW
 ADD CONSTRAINT PS_WORKFLOW_PS_APPLICATIO_FK1 
  FOREIGN KEY (APP_ID) 
  REFERENCES PS_APPLICATION (APP_ID);

ALTER TABLE PS_WORKFLOW
 ADD CONSTRAINT PS_WORKFLOW_TYPE_FK1 
  FOREIGN KEY (WORKFLOW_TYPE_ID) 
  REFERENCES PS_WORKFLOW_TYPE (WORKFLOW_TYPE_ID);

ALTER TABLE PS_WORKFLOW_FIXIT_MAP
 ADD CONSTRAINT PS_FIXIT_MAP_PS_WOR_FK1 
  FOREIGN KEY (WORKFLOW_ID) 
  REFERENCES PS_WORKFLOW (WORKFLOW_ID);

ALTER TABLE PS_WORKFLOW_PROFILE_MAP
 ADD CONSTRAINT PS_WORKFLOW_PROFILE_MAP_P_FK1 
  FOREIGN KEY (WORKFLOW_ID) 
  REFERENCES PS_WORKFLOW (WORKFLOW_ID);

ALTER TABLE PS_WORKFLOW_PROFILE_MAP
 ADD CONSTRAINT PS_WORKFLOW_PROFILE_MAP_P_FK2 
  FOREIGN KEY (PRF_ID) 
  REFERENCES PS_USR_PROFILE (PRF_ID);

ALTER TABLE PS_START_FLOW_HISTORY
 ADD CONSTRAINT PS_START_FLOW_HISTORY_FK1 
  FOREIGN KEY (WORKFLOW_ID) 
  REFERENCES PS_WORKFLOW (WORKFLOW_ID);

ALTER TABLE PS_BUILD_HISTORY
 ADD CONSTRAINT PS_BUILD_HISTORY_PS_START_FK1 
  FOREIGN KEY (START_FLOW_ID) 
  REFERENCES PS_START_FLOW_HISTORY (START_FLOW_ID);

ALTER TABLE PS_WORKFLOW_FIXIT_MAP 
 ADD (FIXIT_WORKFLOW_ID NUMBER );
 
 
--------------------------------------------------------
--  DDL for Table PS_GAUGE_LABELS
--------------------------------------------------------

  CREATE TABLE PS_GAUGE_LABELS 
   (	"FIRSTGAUGENAME" VARCHAR2(300 BYTE), 
	"SECONDGAUGENAME" VARCHAR2(300 BYTE), 
	"MINRANGE" NUMBER, 
	"MAXRANGE" NUMBER, 
	"DATAINFO" VARCHAR2(300 BYTE), 
	"DATAQUERY" VARCHAR2(4000 BYTE), 
	"ISARCHIVED" NUMBER(1,0), 
	"REFRESHRATE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE &MY_TS ;

--------------------------------------------------------
--  DDL for Table PS_LINE_LABELS
--------------------------------------------------------

  CREATE TABLE PS_LINE_LABELS 
   (	"LINEHEADER" VARCHAR2(300 BYTE), 
	"XTITLE" VARCHAR2(100 BYTE), 
	"YTITLE" VARCHAR2(100 BYTE), 
	"XRANGE" VARCHAR2(4000 BYTE), 
	"XINTERVAL" VARCHAR2(4000 BYTE), 
	"LQUERY" VARCHAR2(4000 BYTE), 
	"REFRESHRATE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE &MY_TS ;


--------------------------------------------------------
--  DDL for Table APP_TBL_MASTER
--------------------------------------------------------

  CREATE TABLE APP_TBL_MASTER 
   (	"APP_NAME" VARCHAR2(200 BYTE), 
	"TBL_ID" NUMBER, 
	"TBL_NAME" VARCHAR2(200 BYTE), 
	"TBL_QUERY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE &MY_TS ;
  
--------------------------------------------------------
--  DDL for Index APP_TBL_MASTER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX APP_TBL_MASTER_PK ON APP_TBL_MASTER ("TBL_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE &MY_TS ;
  
--------------------------------------------------------
--  Constraints for Table APP_TBL_MASTER
--------------------------------------------------------

  ALTER TABLE APP_TBL_MASTER ADD CONSTRAINT "APP_TBL_MASTER_PK" PRIMARY KEY ("TBL_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE &MY_TS  ENABLE;
  ALTER TABLE APP_TBL_MASTER MODIFY ("TBL_NAME" NOT NULL ENABLE);
  ALTER TABLE APP_TBL_MASTER MODIFY ("TBL_ID" NOT NULL ENABLE);
  ALTER TABLE APP_TBL_MASTER MODIFY ("APP_NAME" NOT NULL ENABLE);


--------------------------------------------------------
--  DDL for Table APP_TBL_COLUMN
--------------------------------------------------------

  CREATE TABLE APP_TBL_COLUMN 
   (	"TBL_ID" NUMBER, 
	"TBL_COLUMN" VARCHAR2(300 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE &MY_TS ;
--------------------------------------------------------
--  Constraints for Table APP_TBL_COLUMN
--------------------------------------------------------

  ALTER TABLE APP_TBL_COLUMN MODIFY ("TBL_COLUMN" NOT NULL ENABLE);
  ALTER TABLE APP_TBL_COLUMN MODIFY ("TBL_ID" NOT NULL ENABLE);


--------------------------------------------------------
--  Create Default Tables for RepCon
--------------------------------------------------------
 
  CREATE TABLE AVAILABLE_DATABASE_TYPES 
  (
    DATABASE_ID NUMBER NOT NULL ,
    DATABASE_TYPE VARCHAR2(20 BYTE)
   );

  CREATE TABLE DATABASE_TYPES 
  (
    DB_ID NUMBER NOT NULL ,
    DATABASE_ID NUMBER ,
    DB_USER VARCHAR2(100 BYTE) ,
    DB_PASSWORD VARCHAR2(200 BYTE) ,
    DB_URL VARCHAR2(100 BYTE) ,
    REPORT_ID NUMBER ,
    SERIAL_NUMBER NUMBER 
  );

  CREATE TABLE GROUP_REPORT_REL 
  (
    GROUP_REPORT_REL_ID NUMBER NOT NULL ,
    GROUP_ID NUMBER ,
    REPORT_ID NUMBER ,
    CREATED_BY VARCHAR2(20 BYTE) ,
    CREATED_ON DATE ,
    UPDATED_BY VARCHAR2(20 BYTE) ,
    UPDATED_ON VARCHAR2(20 BYTE) 
  );

  CREATE TABLE RELATION_TABLE 
  (
   REL_TABLE_ID NUMBER NOT NULL ,
   USER_ID VARCHAR2(200 BYTE) ,
   REPORT_ID NUMBER ,
   SERIAL_NUMBER NUMBER ,
   TABLE_HEADER VARCHAR2(200 BYTE) ,
   DB_ID NUMBER ,
   NO_OF_COLUMN NUMBER ,
   QUERY VARCHAR2(2000 BYTE) ,
   TABLE_NAME VARCHAR2(200 BYTE) ,
   UPDATED_BY VARCHAR2(100 BYTE) ,
   UPDATED_ON DATE ,
   TABLE_PRIVILEGE VARCHAR2(2000 BYTE) 
 );

 CREATE TABLE REPORT_INFORMATION 
 (
   REPORT_ID NUMBER NOT NULL ,
   REPORT_NAME VARCHAR2(1000 BYTE) ,
   REPORT_URL VARCHAR2(200 BYTE) ,
   AUTHENTICATED VARCHAR2(20 BYTE) ,
   "AUTHORIZATION " VARCHAR2(20 BYTE) ,
   USER_ID VARCHAR2(200 BYTE) ,
   "CREATED_ON " DATE ,
   LAST_COMMITTED_BY VARCHAR2(200 BYTE) ,
   LAST_COMMITTED_ON DATE ,
   UPDATED_BY VARCHAR2(200 BYTE) ,
   UPDATED_ON VARCHAR2(20 BYTE) ,
   REPORT_PRIVILEGE VARCHAR2(2000 BYTE) 
 );

 CREATE TABLE REPORT_UPDATE_HISTORY 
 (
   REPORT_UPDATE_HISTORY_ID NUMBER NOT NULL ,
   REPORT_ID NUMBER ,
   TABLE_SERIAL_NUMBER NUMBER ,
   TABLE_HEADER VARCHAR2(20 BYTE) ,
   IDENTIFIER VARCHAR2(20 BYTE) ,
   ACTION_TAKEN VARCHAR2(20 BYTE) ,
   OLD_VALUE VARCHAR2(20 BYTE) ,
   NEW_VALUE VARCHAR2(20 BYTE) ,
   ACTION_TAKEN_BY VARCHAR2(20 BYTE) ,
   ACTION_TAKEN_ON DATE 
 );

 CREATE TABLE TEMP 
 (
   TEMP_ID NUMBER NOT NULL ,
   REPORT_NAME VARCHAR2(200 BYTE) ,
   DATABASE_TYPE VARCHAR2(50 BYTE) ,
   DATABASE_USER_ID VARCHAR2(200 BYTE) ,
   DATABASE_PASSWORD VARCHAR2(200 BYTE) ,
   DATABASE_URL VARCHAR2(200 BYTE) ,
   TABLE_NAME VARCHAR2(200 BYTE) ,
   NO_OF_COLUMN NUMBER ,
   QUERY VARCHAR2(2000 BYTE) ,
   USER_ID VARCHAR2(200 BYTE) ,
   PRIVILEGE VARCHAR2(2000 BYTE) 
 );

 CREATE TABLE UPDATE_HISTORY 
 (
   UPDATE_HISTORY_ID NUMBER NOT NULL ,
   IDENTIFIER VARCHAR2(20 BYTE) ,
   ACTION_TAKEN VARCHAR2(20 BYTE) ,
   OLD_VALUE VARCHAR2(20 BYTE) ,
   NEW_VALUE VARCHAR2(20 BYTE) ,
   ACTION_TAKEN_BY VARCHAR2(20 BYTE) ,
   ACTION_TAKEN_ON DATE 
 );

 CREATE TABLE USER_GROUP 
 (
   GROUP_ID NUMBER NOT NULL ,
   GROUP_NAME VARCHAR2(20 BYTE) ,
   PORTAL_NAME VARCHAR2(20 BYTE) ,
   PORTAL_URL VARCHAR2(20 BYTE) ,
   CREATED_BY VARCHAR2(20 BYTE) ,
   CREATED_ON DATE ,
   UPDATED_BY VARCHAR2(20 BYTE) ,
   UPDATED_ON VARCHAR2(20 BYTE)  
 );

 CREATE TABLE USER_GROUP_REL 
 (
   USER_GROUP_REL_ID NUMBER NOT NULL ,
   GROUP_ID NUMBER ,
   ROLE VARCHAR2(20 BYTE) ,
   CREATED_BY VARCHAR2(20 BYTE) ,
   CREATED_ON DATE ,
   UPDATED_BY VARCHAR2(20 BYTE) ,
   UPDATED_ON DATE  
 );

 CREATE TABLE USER_INFORMATION 
 (
   ID NUMBER NOT NULL ,
   USER_ID VARCHAR2(200 BYTE) ,
   F_NAME VARCHAR2(200 BYTE) ,
   L_NAME VARCHAR2(200 BYTE) ,
   ADMIN VARCHAR2(20 BYTE) ,
   PASSWORD VARCHAR2(200 BYTE) 
 );



