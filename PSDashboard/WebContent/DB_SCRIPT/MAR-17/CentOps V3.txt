--------------------------------------------------------------------------
-- Run this script in CENTOPS_MED_TEST@MDS01DM0 to make it look like CMGR_DEV@CAHYWR1EMPXXD02:1521/EMPDATABASE.
--
-- Please review the script before using it to make sure it won't cause any unacceptable data loss.
--
-- CENTOPS_MED_TEST@MDS01DM0 Schema Extracted by User CENTOPS_MED_TEST
-- CMGR_DEV@CAHYWR1EMPXXD02:1521/EMPDATABASE Schema Extracted by User CMGR_DEV
--------------------------------------------------------------------------
-- "Set define off" turns off substitution variables.
Set define off;


CREATE OR REPLACE TYPE CENTOPS_MED_TEST.TYP_FEEDBACK_ID AS TABLE OF NUMBER
/

SHOW ERRORS;

CREATE OR REPLACE TYPE CENTOPS_MED_TEST.TYP_REQUEST_ID AS TABLE OF NUMBER
/

SHOW ERRORS;

CREATE SEQUENCE CENTOPS_MED_TEST.APPLICATION_ID_SEQ
  START WITH 15
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE CENTOPS_MED_TEST.APP_URL_SEQ
  START WITH 15
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE CENTOPS_MED_TEST.FEEDBACK_ID_SEQ
  START WITH 28
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE CENTOPS_MED_TEST.LOG_ID_SEQ
  START WITH 70
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE CENTOPS_MED_TEST.REPORT_ID_SEQ
  START WITH 17
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE CENTOPS_MED_TEST.START_FLOW_HISTORY_ID_SEQ
  START WITH 58
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE CENTOPS_MED_TEST.USER_ACCESS_REQUEST_ID_SEQ
  START WITH 46
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE CENTOPS_MED_TEST.USER_LOGIN_LOG_ID_SEQ
  START WITH 1361
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE CENTOPS_MED_TEST.WORKFLOW_ID_SEQ
  START WITH 27
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE CENTOPS_MED_TEST.WORKFLOW_TYPE_ID_SEQ
  START WITH 4
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE TABLE CENTOPS_MED_TEST.APP_URL_LIST
(
  SRNO         NUMBER                           NOT NULL,
  APPNAME      VARCHAR2(100 BYTE),
  DESCRIP      VARCHAR2(100 BYTE),
  URL          VARCHAR2(500 BYTE),
  LIC          VARCHAR2(20 BYTE),
  ISFEATURE    NUMBER(1)                        DEFAULT 0,
  IMGNAME      VARCHAR2(100 BYTE),
  PHOTO        BLOB,
  ISDISABLED   NUMBER(1)                        DEFAULT 0,
  ISINSTALLED  NUMBER(1)                        DEFAULT 1
)
LOB (PHOTO) STORE AS BASICFILE (
  TABLESPACE  FWD_TS
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  RETENTION
  NOCACHE
  LOGGING
      STORAGE    (
                  INITIAL          64K
                  NEXT             1M
                  MAXSIZE          UNLIMITED
                  MINEXTENTS       1
                  MAXEXTENTS       UNLIMITED
                  PCTINCREASE      0
                  BUFFER_POOL      DEFAULT
                 ))
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX CENTOPS_MED_TEST.APP_URL_LIST_PK ON CENTOPS_MED_TEST.APP_URL_LIST
(SRNO)
LOGGING
TABLESPACE FWD_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE CENTOPS_MED_TEST.APP_URL_LIST
 ADD CONSTRAINT APP_URL_LIST_PK
  PRIMARY KEY
  (SRNO)
  USING INDEX CENTOPS_MED_TEST.APP_URL_LIST_PK;

CREATE TABLE CENTOPS_MED_TEST.PS_APPLICATION
(
  APP_ID       NUMBER                           NOT NULL,
  APP_NAME     VARCHAR2(200 BYTE)               NOT NULL,
  CREATE_BY    VARCHAR2(10 BYTE),
  CREATE_DATE  DATE                             DEFAULT SYSDATE               NOT NULL,
  UPDATE_BY    VARCHAR2(10 BYTE),
  UPDATE_DATE  DATE                             DEFAULT SYSDATE               NOT NULL,
  DESCRIPTION  VARCHAR2(200 BYTE),
  APPS_ID      NUMBER
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX CENTOPS_MED_TEST.PS_APPLICATION_PK ON CENTOPS_MED_TEST.PS_APPLICATION
(APP_ID)
LOGGING
TABLESPACE FWD_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE CENTOPS_MED_TEST.PS_APPLICATION
 ADD CONSTRAINT PS_APPLICATION_PK
  PRIMARY KEY
  (APP_ID)
  USING INDEX CENTOPS_MED_TEST.PS_APPLICATION_PK;

CREATE TABLE CENTOPS_MED_TEST.PS_FEEDBACK
(
  FEEDBACK_ID    NUMBER                         NOT NULL,
  FEEDBACK       VARCHAR2(500 BYTE)             NOT NULL,
  WORKFLOW_ID    NUMBER,
  START_FLOW_ID  NUMBER,
  ADDED_BY       VARCHAR2(10 BYTE),
  ADDED_DATE     DATE                           DEFAULT SYSDATE               NOT NULL,
  APPROVED_BY    VARCHAR2(10 BYTE),
  APPROVED_DATE  DATE                           DEFAULT NULL,
  STATUS         VARCHAR2(10 BYTE)
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX CENTOPS_MED_TEST.PS_FEEDBACK_PK ON CENTOPS_MED_TEST.PS_FEEDBACK
(FEEDBACK_ID)
LOGGING
TABLESPACE FWD_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE CENTOPS_MED_TEST.PS_FEEDBACK
 ADD CONSTRAINT PS_FEEDBACK_PK
  PRIMARY KEY
  (FEEDBACK_ID)
  USING INDEX CENTOPS_MED_TEST.PS_FEEDBACK_PK;

CREATE TABLE CENTOPS_MED_TEST.PS_REPORT_DB_DETAILS
(
  ID             NUMBER,
  WORKFLOW_ID    NUMBER,
  USERNAME       VARCHAR2(100 BYTE),
  PASSWORD       VARCHAR2(100 BYTE),
  HOSTNAME       VARCHAR2(200 BYTE),
  PORT           NUMBER,
  SID            VARCHAR2(100 BYTE),
  DATABASE_TYPE  VARCHAR2(200 BYTE),
  REPORT_TABLE   VARCHAR2(100 BYTE),
  QUERY          VARCHAR2(500 BYTE)
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE TABLE CENTOPS_MED_TEST.PS_SERVER_STATE
(
  SERVER             VARCHAR2(25 BYTE),
  OS_TYPE            VARCHAR2(15 BYTE),
  OS_VERSION         VARCHAR2(100 BYTE),
  COMP_PATCH          VARCHAR2(50 BYTE),
  KERNEL_VERSION     VARCHAR2(50 BYTE),
  UP_TIME            VARCHAR2(50 BYTE),
  LAST_CHECK_DATE    DATE,
  UPDATING_USER      VARCHAR2(15 BYTE),
  OS_UPDATE_COUNTER  NUMBER,
  UPDATION_SYS_DATE  DATE,
  CREATION_SYS_DATE  DATE,
  COMPLIANT          VARCHAR2(5 BYTE),
  APPLICATION_NAME   VARCHAR2(50 BYTE),
  ENVIRONMENT        VARCHAR2(40 BYTE)
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE TABLE CENTOPS_MED_TEST.PS_USER_ACCESS_REQUEST
(
  REQUEST_ID         NUMBER                     NOT NULL,
  USER_ID            VARCHAR2(20 BYTE)          NOT NULL,
  REQUESTED_LVL_ID   NUMBER,
  REQUESTED_APP_ID   NUMBER,
  REQUESTED_PRF_ID   NUMBER,
  STATUS             VARCHAR2(20 BYTE)          NOT NULL,
  REQUEST_DATE       DATE                       DEFAULT SYSDATE               NOT NULL,
  REQUESTER_COMMENT  VARCHAR2(500 BYTE),
  APPROVED_BY        VARCHAR2(20 BYTE),
  APPROVED_DATE      DATE,
  APPROVER_COMMENT   VARCHAR2(500 BYTE)
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX CENTOPS_MED_TEST.PS_USER_ACCESS_REQUEST_PK ON CENTOPS_MED_TEST.PS_USER_ACCESS_REQUEST
(REQUEST_ID)
LOGGING
TABLESPACE FWD_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE CENTOPS_MED_TEST.PS_USER_ACCESS_REQUEST
 ADD CONSTRAINT PS_USER_ACCESS_REQUEST_PK
  PRIMARY KEY
  (REQUEST_ID)
  USING INDEX CENTOPS_MED_TEST.PS_USER_ACCESS_REQUEST_PK;

CREATE TABLE CENTOPS_MED_TEST.PS_USER_LOGIN_LOG
(
  LOG_ID       NUMBER                           NOT NULL,
  USER_ID      VARCHAR2(20 BYTE),
  LOG_IN_DATE  DATE
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX CENTOPS_MED_TEST.PS_USER_LOGIN_LOG_PK ON CENTOPS_MED_TEST.PS_USER_LOGIN_LOG
(LOG_ID)
LOGGING
TABLESPACE FWD_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE CENTOPS_MED_TEST.PS_USER_LOGIN_LOG
 ADD CONSTRAINT PS_USER_LOGIN_LOG_PK
  PRIMARY KEY
  (LOG_ID)
  USING INDEX CENTOPS_MED_TEST.PS_USER_LOGIN_LOG_PK;

CREATE TABLE CENTOPS_MED_TEST.PS_USR_MGMT_LEVEL
(
  LVL_ID       NUMBER                           NOT NULL,
  LVL_NAME     VARCHAR2(50 BYTE)                NOT NULL,
  LVL_SCOPE    VARCHAR2(50 BYTE),
  LVL_DESC     VARCHAR2(500 BYTE),
  LVL_DEFAULT  VARCHAR2(1 BYTE)
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX CENTOPS_MED_TEST.PS_USR_MGMT_LEVEL_PK ON CENTOPS_MED_TEST.PS_USR_MGMT_LEVEL
(LVL_ID)
LOGGING
TABLESPACE FWD_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE CENTOPS_MED_TEST.PS_USR_MGMT_LEVEL
 ADD CONSTRAINT PS_USR_MGMT_LEVEL_PK
  PRIMARY KEY
  (LVL_ID)
  USING INDEX CENTOPS_MED_TEST.PS_USR_MGMT_LEVEL_PK;

CREATE TABLE CENTOPS_MED_TEST.PS_USR_PROFILE
(
  PRF_ID       NUMBER                           NOT NULL,
  PRF_NAME     VARCHAR2(50 BYTE)                NOT NULL,
  PRF_SCOPE    VARCHAR2(50 BYTE),
  PRF_DESC     VARCHAR2(500 BYTE),
  PRF_DEFAULT  VARCHAR2(1 BYTE)
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX CENTOPS_MED_TEST.PS_USR_PROFILE_PK ON CENTOPS_MED_TEST.PS_USR_PROFILE
(PRF_ID)
LOGGING
TABLESPACE FWD_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE CENTOPS_MED_TEST.PS_USR_PROFILE
 ADD CONSTRAINT PS_USR_PROFILE_PK
  PRIMARY KEY
  (PRF_ID)
  USING INDEX CENTOPS_MED_TEST.PS_USR_PROFILE_PK;

CREATE TABLE CENTOPS_MED_TEST.PS_WORKFLOW_LOG
(
  LOG_ID       NUMBER                           NOT NULL,
  WORKFLOW_ID  NUMBER                           NOT NULL,
  START_BY     VARCHAR2(50 BYTE),
  START_DATE   DATE,
  STATUS       VARCHAR2(20 BYTE)
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX CENTOPS_MED_TEST.PS_WORKFLOW_LOG_PK ON CENTOPS_MED_TEST.PS_WORKFLOW_LOG
(LOG_ID)
LOGGING
TABLESPACE FWD_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE CENTOPS_MED_TEST.PS_WORKFLOW_LOG
 ADD CONSTRAINT PS_WORKFLOW_LOG_PK
  PRIMARY KEY
  (LOG_ID)
  USING INDEX CENTOPS_MED_TEST.PS_WORKFLOW_LOG_PK;

CREATE TABLE CENTOPS_MED_TEST.PS_WORKFLOW_PARAM_MAP
(
  WORKFLOW_ID     NUMBER                        NOT NULL,
  PARAMETER_NAME  VARCHAR2(200 BYTE)            NOT NULL
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE TABLE CENTOPS_MED_TEST.PS_WORKFLOW_TYPE
(
  WORKFLOW_TYPE_ID  NUMBER                      NOT NULL,
  WORKFLOW_TYPE     VARCHAR2(50 BYTE)           NOT NULL,
  DESCRIPTION       VARCHAR2(200 BYTE),
  ADDED_BY          VARCHAR2(20 BYTE),
  ADDED_DATE        DATE,
  UPDATED_BY        VARCHAR2(20 BYTE),
  UPDATED_DATE      DATE
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX CENTOPS_MED_TEST.PS_WORKFLOW_TYPE_PK ON CENTOPS_MED_TEST.PS_WORKFLOW_TYPE
(WORKFLOW_TYPE_ID)
LOGGING
TABLESPACE FWD_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE CENTOPS_MED_TEST.PS_WORKFLOW_TYPE
 ADD CONSTRAINT PS_WORKFLOW_TYPE_PK
  PRIMARY KEY
  (WORKFLOW_TYPE_ID)
  USING INDEX CENTOPS_MED_TEST.PS_WORKFLOW_TYPE_PK;

CREATE OR REPLACE PROCEDURE CENTOPS_MED_TEST.SP_APPROVE_REJECT_FEEDBACK
( P_FEEDBACK_ID_ARRAY IN TYP_FEEDBACK_ID
, P_APPROVER IN VARCHAR2
, P_STATUS IN VARCHAR2
, P_RESULT OUT NUMBER
, P_MESSAGE OUT VARCHAR2
) AS
BEGIN

    DECLARE
    V_FEEDBACK_ID PS_FEEDBACK.FEEDBACK_ID%TYPE;
    BEGIN
        IF P_APPROVER IS NULL OR P_APPROVER='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'User ID missing';
            RETURN;
        END IF;
        
        IF P_STATUS IS NULL OR P_STATUS='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'Status missing';
            RETURN;
        END IF;
        
        
        FOR i IN 1..P_FEEDBACK_ID_ARRAY.COUNT
          LOOP
            V_FEEDBACK_ID := P_FEEDBACK_ID_ARRAY(i);
 
            IF P_STATUS = 'APPROVED' THEN
              UPDATE PS_FEEDBACK SET STATUS = P_STATUS, APPROVED_BY = LOWER(P_APPROVER), APPROVED_DATE = SYSDATE WHERE FEEDBACK_ID = V_FEEDBACK_ID;
              
            ELSIF P_STATUS = 'REJECTED' THEN
              UPDATE PS_FEEDBACK SET STATUS = P_STATUS, APPROVED_BY = LOWER(P_APPROVER), APPROVED_DATE = SYSDATE WHERE FEEDBACK_ID = V_FEEDBACK_ID;
            
            ELSE
              P_RESULT := 2;
              P_MESSAGE := 'Invalid approval status';
              RETURN;
            END IF;
            
        END LOOP;
          
        COMMIT;
        P_RESULT := 0;
        P_MESSAGE := 'SUCCCESS';    
    END;
EXCEPTION
    WHEN OTHERS THEN
        P_RESULT := -1;
        P_MESSAGE := SQLERRM;    
        ROLLBACK;    
END SP_APPROVE_REJECT_FEEDBACK;
/

SHOW ERRORS;

CREATE OR REPLACE TRIGGER CENTOPS_MED_TEST.GEN_PS_APPLICATION  BEFORE INSERT ON CENTOPS_MED_TEST.PS_APPLICATION
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.APP_ID IS NULL THEN
            SELECT application_id_seq.nextval INTO :NEW.APP_ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER CENTOPS_MED_TEST.GEN_PS_FEEDBACK BEFORE INSERT ON CENTOPS_MED_TEST.PS_FEEDBACK
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.FEEDBACK_ID IS NULL THEN
            SELECT feedback_id_seq.nextval INTO :NEW.FEEDBACK_ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER CENTOPS_MED_TEST.GEN_PS_LOG_ID BEFORE INSERT ON CENTOPS_MED_TEST.PS_WORKFLOW_LOG
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.LOG_ID IS NULL THEN
            SELECT log_id_seq.nextval INTO :NEW.LOG_ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER CENTOPS_MED_TEST.GEN_PS_REPORT_ID BEFORE INSERT ON CENTOPS_MED_TEST.PS_REPORT_DB_DETAILS
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.ID IS NULL THEN
            SELECT report_id_seq.nextval INTO :NEW.ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER CENTOPS_MED_TEST.GEN_PS_USER_ACCESS_REQUEST_ID BEFORE INSERT ON CENTOPS_MED_TEST.PS_USER_ACCESS_REQUEST
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.REQUEST_ID IS NULL THEN
            SELECT user_access_request_id_seq.nextval INTO :NEW.REQUEST_ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER CENTOPS_MED_TEST.GEN_PS_USER_LOGIN_LOG  BEFORE INSERT ON CENTOPS_MED_TEST.PS_USER_LOGIN_LOG
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.LOG_ID IS NULL THEN
            SELECT user_login_log_id_seq.nextval INTO :NEW.LOG_ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER CENTOPS_MED_TEST.GEN_PS_WORKFLOW_TYPE BEFORE INSERT ON CENTOPS_MED_TEST.PS_WORKFLOW_TYPE
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.WORKFLOW_TYPE_ID IS NULL THEN
            SELECT workflow_type_id_seq.nextval INTO :NEW.WORKFLOW_TYPE_ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE TABLE CENTOPS_MED_TEST.PS_FWD_TS
(
  USER_ID               VARCHAR2(10 BYTE)       NOT NULL,
  USER_FNAME            VARCHAR2(100 BYTE),
  USER_LNAME            VARCHAR2(100 BYTE),
  USER_EMAIL_ID         VARCHAR2(100 BYTE),
  USER_CONTACT_NO       VARCHAR2(20 BYTE),
  USER_TEAM             VARCHAR2(50 BYTE),
  ACCOUNT_CREATED_DATE  DATE                    DEFAULT SYSDATE               NOT NULL,
  LVL_ID                NUMBER                  DEFAULT 1,
  APP_ID                NUMBER,
  PRF_ID                NUMBER,
  LAST_LOGIN_DATE       DATE,
  PASSWORD              VARCHAR2(100 BYTE),
  CUSTOM_USER           VARCHAR2(20 BYTE)
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX CENTOPS_MED_TEST.PS_FWD_TS_PK ON CENTOPS_MED_TEST.PS_FWD_TS
(USER_ID)
LOGGING
TABLESPACE FWD_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE CENTOPS_MED_TEST.PS_FWD_TS
 ADD CONSTRAINT PS_FWD_TS_PK
  PRIMARY KEY
  (USER_ID)
  USING INDEX CENTOPS_MED_TEST.PS_FWD_TS_PK;

CREATE TABLE CENTOPS_MED_TEST.PS_WORKFLOW
(
  WORKFLOW_ID        NUMBER                     NOT NULL,
  WORKFLOW_NAME      VARCHAR2(200 BYTE)         NOT NULL,
  WORKFLOW_TYPE_ID   NUMBER,
  HOST_URL           VARCHAR2(200 BYTE),
  JOB_NAME           VARCHAR2(200 BYTE),
  BUILD_TYPE         VARCHAR2(200 BYTE),
  BUILD_PARAMETER    VARCHAR2(200 BYTE),
  APP_ID             NUMBER,
  DESCRIPTION        VARCHAR2(500 BYTE),
  PORT               NUMBER,
  SERVER             VARCHAR2(200 BYTE),
  AUTH_TOKEN         VARCHAR2(200 BYTE),
  PASSWORD           VARCHAR2(200 BYTE),
  USERNAME           VARCHAR2(200 BYTE),
  CREATED_BY         VARCHAR2(10 BYTE),
  CREATED_DATE       DATE                       DEFAULT SYSDATE,
  LAST_UPDATED_BY    VARCHAR2(10 BYTE),
  LAST_UPDATED_DATE  DATE                       DEFAULT SYSDATE,
  LAST_BUILD_STATUS  VARCHAR2(20 BYTE)
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX CENTOPS_MED_TEST.PS_WORKFLOW_PK ON CENTOPS_MED_TEST.PS_WORKFLOW
(WORKFLOW_ID)
LOGGING
TABLESPACE FWD_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE CENTOPS_MED_TEST.PS_WORKFLOW
 ADD CONSTRAINT PS_WORKFLOW_PK
  PRIMARY KEY
  (WORKFLOW_ID)
  USING INDEX CENTOPS_MED_TEST.PS_WORKFLOW_PK;

CREATE TABLE CENTOPS_MED_TEST.PS_WORKFLOW_FIXIT_MAP
(
  WORKFLOW_ID          NUMBER                   NOT NULL,
  ERROR_NAME           VARCHAR2(100 BYTE)       NOT NULL,
  ERROR_CODE           NUMBER                   NOT NULL,
  FIXIT_WORKFLOW_NAME  VARCHAR2(100 BYTE)       NOT NULL
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE TABLE CENTOPS_MED_TEST.PS_WORKFLOW_PROFILE_MAP
(
  WORKFLOW_ID  NUMBER,
  PRF_ID       NUMBER
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE OR REPLACE PROCEDURE CENTOPS_MED_TEST.SP_APPROVE_REJECT_USER_REQUEST
( P_REQUEST_ID_ARRAY IN TYP_REQUEST_ID
, P_APPROVER IN VARCHAR2
, P_STATUS IN VARCHAR2
, P_COMMENT IN VARCHAR2
, P_RESULT OUT NUMBER
, P_MESSAGE OUT VARCHAR2
) AS
BEGIN
    DECLARE
    V_EXISTS NUMBER;
    V_USER_ID VARCHAR2(20);
    V_LVL_ID NUMBER;
    V_APP_ID NUMBER;
    V_PRF_ID NUMBER;
    V_REQUEST_ID PS_USER_ACCESS_REQUEST.REQUEST_ID%TYPE;
    BEGIN
        IF P_APPROVER IS NULL OR P_APPROVER='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'User ID missing';
            RETURN;
        END IF;
        
        IF P_STATUS IS NULL OR P_STATUS='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'Status missing';
            RETURN;
        END IF;
        
        IF P_COMMENT IS NULL OR P_COMMENT='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'Approver Comment missing';
            RETURN;
        END IF;
        
        FOR i IN 1..P_REQUEST_ID_ARRAY.COUNT
          LOOP
            V_REQUEST_ID := P_REQUEST_ID_ARRAY(i);
 
            IF P_STATUS = 'APPROVED' THEN
              UPDATE PS_USER_ACCESS_REQUEST SET STATUS = 'APPROVED', APPROVED_BY = LOWER(P_APPROVER), APPROVED_DATE = SYSDATE, APPROVER_COMMENT = P_COMMENT WHERE REQUEST_ID = V_REQUEST_ID;
              
              BEGIN
                SELECT USER_ID, REQUESTED_LVL_ID, REQUESTED_APP_ID, REQUESTED_PRF_ID INTO V_USER_ID, V_LVL_ID, V_APP_ID, V_PRF_ID FROM PS_USER_ACCESS_REQUEST WHERE REQUEST_ID = V_REQUEST_ID;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                V_LVL_ID := 0;
              END;  
                
              UPDATE PS_FWD_TS SET LVL_ID = V_LVL_ID, APP_ID = V_APP_ID, PRF_ID = V_PRF_ID WHERE USER_ID = V_USER_ID;
            
            ELSIF P_STATUS = 'REJECTED' THEN
              UPDATE PS_USER_ACCESS_REQUEST SET STATUS = P_STATUS, APPROVED_BY = LOWER(P_APPROVER), APPROVED_DATE = SYSDATE, APPROVER_COMMENT = P_COMMENT WHERE REQUEST_ID = V_REQUEST_ID;
            
            ELSE
              P_RESULT := 2;
              P_MESSAGE := 'Invalid approval status';
              RETURN;
            END IF;
            
        END LOOP;
          
        COMMIT;
        P_RESULT := 0;
        P_MESSAGE := 'SUCCCESS';    
    END;
EXCEPTION
    WHEN OTHERS THEN
        P_RESULT := -1;
        P_MESSAGE := SQLERRM;    
        ROLLBACK;    
END SP_APPROVE_REJECT_USER_REQUEST;
/

SHOW ERRORS;

CREATE OR REPLACE PROCEDURE CENTOPS_MED_TEST.SP_SAVE_UPDATE_USER_REQUEST
( P_USER_ID IN VARCHAR2
, P_REQUESTED_LVL_ID IN NUMBER
, P_REQUESTED_APP_ID IN NUMBER
, P_REQUESTED_PRF_ID IN NUMBER
, P_USER_TEAM IN VARCHAR2
, P_STATUS IN VARCHAR2
, P_COMMENT IN VARCHAR2
, P_RESULT OUT NUMBER
, P_MESSAGE OUT VARCHAR2
) AS
BEGIN
    DECLARE
    V_EXISTS NUMBER;
    V_REQUEST_ID NUMBER;
    BEGIN
        V_REQUEST_ID :=0;
        dbms_output.put_line(V_REQUEST_ID);
        IF P_USER_ID IS NULL OR P_USER_ID='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'User ID missing';
            RETURN;
        END IF;
        
        IF P_REQUESTED_LVL_ID IS NULL OR P_REQUESTED_LVL_ID='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'Requested Level ID missing';
            RETURN;
        END IF;
        
        IF P_REQUESTED_APP_ID IS NULL OR P_REQUESTED_APP_ID='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'Requested App ID missing';
            RETURN;
        END IF;
        
        IF P_REQUESTED_PRF_ID IS NULL OR P_REQUESTED_PRF_ID='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'Requested Profile ID missing';
            RETURN;
        END IF;
        
        IF P_USER_TEAM IS NULL OR P_USER_TEAM='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'User Team missing';
            RETURN;
        END IF;
        
        IF P_STATUS IS NULL OR P_STATUS='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'Status missing';
            RETURN;
        END IF;
        
        IF P_COMMENT IS NULL OR P_COMMENT='' THEN
            P_RESULT := 0;
            P_MESSAGE := 'Requester Comment missing';
            RETURN;
        END IF;
        dbms_output.put_line(V_REQUEST_ID);
        BEGIN
          SELECT REQUEST_ID into V_REQUEST_ID FROM PS_USER_ACCESS_REQUEST WHERE USER_ID = P_USER_ID AND STATUS = 'PENDING';
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
          V_REQUEST_ID := 0;
        END;  
         
            IF V_REQUEST_ID > 0 THEN
              UPDATE PS_USER_ACCESS_REQUEST SET REQUESTED_LVL_ID = P_REQUESTED_LVL_ID, REQUESTED_APP_ID = P_REQUESTED_APP_ID, REQUESTED_PRF_ID = P_REQUESTED_PRF_ID, REQUESTER_COMMENT = P_COMMENT WHERE REQUEST_ID = V_REQUEST_ID;
              
              UPDATE PS_FWD_TS SET USER_TEAM = P_USER_TEAM WHERE USER_ID = P_USER_ID;
            ELSIF V_REQUEST_ID <= 0 THEN
              INSERT INTO PS_USER_ACCESS_REQUEST (USER_ID, REQUESTED_LVL_ID, REQUESTED_APP_ID, REQUESTED_PRF_ID, STATUS, REQUESTER_COMMENT) VALUES (P_USER_ID, P_REQUESTED_LVL_ID, P_REQUESTED_APP_ID, P_REQUESTED_PRF_ID, P_STATUS, P_COMMENT);
              
              UPDATE PS_FWD_TS SET USER_TEAM = P_USER_TEAM WHERE USER_ID = P_USER_ID;
            ELSE
              P_RESULT := 2;
              P_MESSAGE := 'Unable to save request!';
              RETURN;
            END IF;
          
        COMMIT;
        P_RESULT := 0;
        P_MESSAGE := 'SUCCCESS';    
    END;
EXCEPTION
    WHEN OTHERS THEN
        P_RESULT := -1;
        P_MESSAGE := SQLERRM;    
        ROLLBACK;    
END SP_SAVE_UPDATE_USER_REQUEST;
/

SHOW ERRORS;

CREATE OR REPLACE TRIGGER CENTOPS_MED_TEST.GEN_PS_WORKFLOW_ID BEFORE INSERT ON CENTOPS_MED_TEST.PS_WORKFLOW
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.WORKFLOW_ID IS NULL THEN
            SELECT workflow_id_seq.nextval INTO :NEW.WORKFLOW_ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE TABLE CENTOPS_MED_TEST.PS_START_FLOW_HISTORY
(
  START_FLOW_ID   NUMBER                        NOT NULL,
  WORKFLOW_ID     NUMBER                        NOT NULL,
  START_TIME      TIMESTAMP(6),
  START_BY        VARCHAR2(50 BYTE),
  JENKINS_STATUS  VARCHAR2(20 BYTE),
  REPORT_STATUS   VARCHAR2(20 BYTE)
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX CENTOPS_MED_TEST.PS_START_FLOW_STATUS_PK ON CENTOPS_MED_TEST.PS_START_FLOW_HISTORY
(START_FLOW_ID)
LOGGING
TABLESPACE FWD_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER TABLE CENTOPS_MED_TEST.PS_START_FLOW_HISTORY
 ADD CONSTRAINT PS_START_FLOW_STATUS_PK
  PRIMARY KEY
  (START_FLOW_ID)
  USING INDEX CENTOPS_MED_TEST.PS_START_FLOW_STATUS_PK;

CREATE OR REPLACE TRIGGER CENTOPS_MED_TEST.GEN_START_FLOW_ID BEFORE INSERT ON CENTOPS_MED_TEST.PS_START_FLOW_HISTORY
FOR EACH ROW
BEGIN
      IF inserting THEN
        IF :NEW.START_FLOW_ID IS NULL THEN
            SELECT start_flow_history_id_seq.nextval INTO :NEW.START_FLOW_ID FROM dual;      
        END IF;   
    END IF; 
END;
/
SHOW ERRORS;

CREATE TABLE CENTOPS_MED_TEST.PS_BUILD_HISTORY
(
  WORKFLOW_ID         NUMBER,
  BUILD_NO            NUMBER,
  ID                  NUMBER,
  FULL_DISPLAY_NAME   VARCHAR2(100 BYTE),
  DISPLAY_NAME        VARCHAR2(50 BYTE),
  BUILT_ON            VARCHAR2(50 BYTE),
  URL                 VARCHAR2(200 BYTE),
  QUEUE_ID            NUMBER,
  TIMESTAMP           TIMESTAMP(6),
  ESTIMATED_DURATION  NUMBER,
  DURATION            NUMBER,
  SHORT_DESCRIPTIOIN  VARCHAR2(200 BYTE),
  ADDR                VARCHAR2(200 BYTE),
  USER_ID             VARCHAR2(50 BYTE),
  USER_NAME           VARCHAR2(50 BYTE),
  UPSTREAM_BUILD_NO   NUMBER,
  UPSTREAM_BUILD_URL  VARCHAR2(200 BYTE),
  UPSTREAM_PROJECT    VARCHAR2(200 BYTE),
  RESULT              VARCHAR2(20 BYTE),
  START_FLOW_ID       NUMBER
)
TABLESPACE FWD_TS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL
MONITORING;

ALTER TABLE CENTOPS_MED_TEST.PS_FWD_TS
 ADD CONSTRAINT PS_FWD_TS_PS_APPLICATION_FK1 
  FOREIGN KEY (APP_ID) 
  REFERENCES CENTOPS_MED_TEST.PS_APPLICATION (APP_ID);

ALTER TABLE CENTOPS_MED_TEST.PS_FWD_TS
 ADD CONSTRAINT PS_FWD_TS_PS_USR_PROFILE_FK1 
  FOREIGN KEY (PRF_ID) 
  REFERENCES CENTOPS_MED_TEST.PS_USR_PROFILE (PRF_ID);

ALTER TABLE CENTOPS_MED_TEST.PS_FWD_TS
 ADD CONSTRAINT PS_FWD_TS_USR_MGMT_LEVEL_FK1 
  FOREIGN KEY (LVL_ID) 
  REFERENCES CENTOPS_MED_TEST.PS_USR_MGMT_LEVEL (LVL_ID);

ALTER TABLE CENTOPS_MED_TEST.PS_WORKFLOW
 ADD CONSTRAINT PS_WORKFLOW_PS_APPLICATIO_FK1 
  FOREIGN KEY (APP_ID) 
  REFERENCES CENTOPS_MED_TEST.PS_APPLICATION (APP_ID);

ALTER TABLE CENTOPS_MED_TEST.PS_WORKFLOW
 ADD CONSTRAINT PS_WORKFLOW_TYPE_FK1 
  FOREIGN KEY (WORKFLOW_TYPE_ID) 
  REFERENCES CENTOPS_MED_TEST.PS_WORKFLOW_TYPE (WORKFLOW_TYPE_ID);

ALTER TABLE CENTOPS_MED_TEST.PS_WORKFLOW_FIXIT_MAP
 ADD CONSTRAINT PS_FIXIT_MAP_PS_WOR_FK1 
  FOREIGN KEY (WORKFLOW_ID) 
  REFERENCES CENTOPS_MED_TEST.PS_WORKFLOW (WORKFLOW_ID);

ALTER TABLE CENTOPS_MED_TEST.PS_WORKFLOW_PROFILE_MAP
 ADD CONSTRAINT PS_WORKFLOW_PROFILE_MAP_P_FK1 
  FOREIGN KEY (WORKFLOW_ID) 
  REFERENCES CENTOPS_MED_TEST.PS_WORKFLOW (WORKFLOW_ID);

ALTER TABLE CENTOPS_MED_TEST.PS_WORKFLOW_PROFILE_MAP
 ADD CONSTRAINT PS_WORKFLOW_PROFILE_MAP_P_FK2 
  FOREIGN KEY (PRF_ID) 
  REFERENCES CENTOPS_MED_TEST.PS_USR_PROFILE (PRF_ID);

ALTER TABLE CENTOPS_MED_TEST.PS_START_FLOW_HISTORY
 ADD CONSTRAINT PS_START_FLOW_HISTORY_FK1 
  FOREIGN KEY (WORKFLOW_ID) 
  REFERENCES CENTOPS_MED_TEST.PS_WORKFLOW (WORKFLOW_ID);

ALTER TABLE CENTOPS_MED_TEST.PS_BUILD_HISTORY
 ADD CONSTRAINT PS_BUILD_HISTORY_PS_START_FK1 
  FOREIGN KEY (START_FLOW_ID) 
  REFERENCES CENTOPS_MED_TEST.PS_START_FLOW_HISTORY (START_FLOW_ID);
